
FIX:

MathContext precision = new MathContext(1000); // 100 decimal digits of accuracy
BigDecimal a = new BigDecimal("1");
BigDecimal b = new BigDecimal("3");
BigDecimal c = a.divide(b, precision);

System.out.println (c);

See:  ExceptionFixDemo.java





https://stackoverflow.com/questions/4591206/arithmeticexception-non-terminating-decimal-expansion-no-exact-representable

Why does the following code raise the exception shown below?

BigDecimal a = new BigDecimal("1.6");
BigDecimal b = new BigDecimal("9.2");
a.divide(b) // results in the following exception.

Exception:

java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable de

**********************

To fix, you need to do something like this:

a.divide(b, 2, RoundingMode.HALF_UP)

where 2 is the scale and RoundingMode.HALF_UP is rounding mode

For more details see this blog post.
http://jaydeepm.wordpress.com/2009/06/04/bigdecimal-and-non-terminating-decimal-expansion-error/



**********************

You can do

a.divide(b, MathContext.DECIMAL128)

You can choose the number of bits you want: either 32, 64 or 128.

Check out this link :

http://edelstein.pebbles.cs.cmu.edu/jadeite/main.php?api=java6&state=class&package=java.math&class=MathContext

**********************

Solution to bypass exception:

MathContext precision = new MathContext(int setPrecisionYouWant); // example 2
BigDecimal a = new BigDecimal("1.6",precision);
BigDecimal b = new BigDecimal("9.2",precision);
a.divide(b) // result = 0.17

**********************


BigDecimal Non-terminating decimal expansion; no exact representable decimal result.
